import UIKit
import RxSwift
import RxCocoa

let disposeBag = DisposeBag()

let publishSubject = PublishSubject<String>()

publishSubject.onNext("Issue 1")

publishSubject.subscribe { event in
    print("­ЪњЕ event : \(event) \n")
}

publishSubject.onNext("Issue 2")
publishSubject.onNext("Issue 3")


//subject.dispose()

publishSubject.onCompleted()

publishSubject.onNext("Issue 4")

#warning("TODO : PublishSubject -> subscribeтЅЇсѓцсЃЎсЃ│сЃѕсЂ»сѓГсЃБсЃЃсѓисЃЦсЂЌсЂфсЂё")

print("­Ъда­Ъда­Ъда­Ъда­Ъда­Ъда­Ъда­Ъда­Ъда­Ъда­Ъда­Ъда­Ъда­Ъда")

let behaviorSubject = BehaviorSubject(value: "Initial Value")

behaviorSubject.onNext("Last Issue")
behaviorSubject.onNext("Last Issue2")

behaviorSubject.subscribe { event in
    print("­ЪњЕ event : \(event) \n")
}

behaviorSubject.onNext("Issue 1")

#warning("TODO : BehaviorSubject -> subscribeуЏ┤тЅЇсѓцсЃЎсЃ│сЃѕсѓњ1сЂцсЂасЂЉсѓГсЃБсЃЃсѓисЃЦ")

print("­Ъда­Ъда­Ъда­Ъда­Ъда­Ъда­Ъда­Ъда­Ъда­Ъда­Ъда­Ъда­Ъда­Ъда")

let replaySubject = ReplaySubject<String>.create(bufferSize: 2)

replaySubject.onNext("Issue 1")
replaySubject.onNext("Issue 2")
replaySubject.onNext("Issue 3")

replaySubject.subscribe {
    print("­ЪњЕ replay : \($0) \n")
}

replaySubject.onNext("Issue 4")
replaySubject.onNext("Issue 5")
replaySubject.onNext("Issue 6")

print("­Ъда­Ъда­Ъда­Ъда­Ъда­Ъдаreplay 2­Ъда­Ъда­Ъда­Ъда­Ъда­Ъда­Ъда­Ъда")

replaySubject.subscribe {
    print("­ЪњЕ replay2 : \($0) \n")
}

#warning("TODO : ReplaySubject -> ТїЄт«џТЋ░уЏ┤тЅЇсѓцсЃЎсЃ│сЃѕсѓњсѓГсЃБсЃЃсѓисЃЦсЂЌсЂдсѓІ")

print("­Ъда­Ъда­Ъда­Ъда­Ъда­Ъда­Ъда­Ъда­Ъда­Ъда­Ъда­Ъда­Ъда­Ъда")

let behaviorRelay = BehaviorRelay(value: "Initial Value")


behaviorRelay.accept("Item 1")

behaviorRelay.asObservable()
    .subscribe {
        print("­ЪњЕ behaviorRelay : \($0) \n")
    }

